{"version":3,"sources":["Components/GraphComponent.jsx","Algorithms/bfs.js","App.js","reportWebVitals.js","index.js"],"names":["cytoscape","use","cola","GraphComponent","props","state","w","h","elements","options","name","randomize","padding","avoidOverlap","maxSimulationTime","nodes","adjacencyList","this","setState","window","innerWidth","innerHeight","resetGraph","newGraph","n","cy","remove","edgeList","adjList","n_edges","count","edgeName","randNode","add","data","id","label","i","RandomIntFromInterval","toString","source","target","push","node1","node2","length","includes","parseInt","animations","adj","q","visited","path","spread","previous","node_source","shift","node_target","breadthSearch","p","time","$id","style","setTimeout","className","onClick","refreshPage","breadthFirstSearch","on","_evt","layout","run","fit","width","height","stylesheet","selector","backgroundColor","React","Component","min","max","Math","floor","random","location","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sWAOAA,IAAUC,IAAIC,K,IAEOC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,EAAG,EACHC,EAAG,EACHC,SAAU,GACVC,QAAS,CACLC,KAAM,OACNC,WAAW,EACXC,QAAS,IACTC,cAAc,EACdC,kBAAmB,KAGvBC,MAAO,IAEPC,cAAe,IAjBJ,E,qDAqBnB,WAEIC,KAAKC,SAAS,CACVZ,EAAGa,OAAOC,WACVb,EAAGY,OAAOE,cAGdJ,KAAKK,e,wBAGT,WACIL,KAAKM,SAASN,KAAKZ,MAAMU,S,sBAG7B,SAASS,GAELP,KAAKQ,GAAGjB,WAAWkB,SACnB,IAAMC,EAAW,GACXC,EAAU,GAEVC,EAAUL,EAAI,EAEhBM,EAAQN,EACRO,EAAW,GACXC,EAAW,EAEff,KAAKQ,GAAGQ,IAAI,CAACC,KAAM,CAACC,GAAI,IAAKC,MAAO,QAEpC,IAAK,IAAIC,EAAI,EAAGA,EAAIb,EAAGa,IACnBT,EAAQS,GAAK,GAKjB,IAAK,IAAIA,EAAI,EAAGA,EAAIb,EAAGa,IAKfL,EAAWM,EADXD,GAAK,EAC4BA,EAAE,EAEF,EAFKA,EAAE,GAKxCA,IAAMb,EAAE,EACRP,KAAKQ,GAAGQ,IAAI,CAACC,KAAM,CAACC,GAAIE,EAAEE,WAAYH,MAAO,YAE7CnB,KAAKQ,GAAGQ,IAAI,CAACC,KAAM,CAACC,GAAIE,EAAEE,WAAYH,MAAO,MASjDnB,KAAKQ,GAAGQ,IAAI,CAACC,KAAM,CAACC,GAAIH,EAASO,WAAW,IAAIF,EAAEE,WAAYC,OAAQR,EAASO,WAAYE,OAAQJ,EAAEE,WAAYH,MAAO,IAAIC,EAAEE,cAC9HR,EAAWC,EAASO,WAAaF,EAAEE,WACnCZ,EAASe,KAAKX,GACdH,EAAQI,GAAUU,KAAKL,GACvBT,EAAQS,GAAGK,KAAKV,GAIpB,KAAOF,GAASD,GAAS,CAGrB,IAFA,IAAIc,EAAQ,IACRC,EAAQ,IACFP,EAAI,EAAGA,EAAIV,EAASkB,OAAQR,KAE7BV,EAASU,GAAGS,SAASH,IAAUhB,EAASU,GAAGS,SAASF,IAAWD,IAAUC,KAC1EP,EAAI,EACJM,EAAQL,EAAsB,EAAGd,EAAE,GAAGe,WACtCK,EAAQN,EAAsB,EAAGd,EAAE,GAAGe,YAG9CtB,KAAKQ,GAAGQ,IAAI,CAACC,KAAM,CAACC,GAAIQ,EAAM,IAAIC,EAAOJ,OAAQG,EAAOF,OAAQG,EAAOR,MAAO,IAAIN,EAAMS,cACxFR,EAAWY,EAAQC,EACnBjB,EAASe,KAAKX,GACdH,EAAQmB,SAASJ,IAAQD,KAAKK,SAASH,IACvChB,EAAQmB,SAASH,IAAQF,KAAKK,SAASJ,IACvCb,IAGJb,KAAKC,SAAS,CACVF,cAAeY,M,gCAIvB,WACIX,KAAK+B,WCxHN,SAAuBC,GAQ1B,IAPA,IAAID,EAAa,CAAC,EAAE,GAChBE,EAAI,GACJC,EAAU,GACVC,EAAO,GACPC,EAAS,GAETC,EAAW,GACNjB,EAAI,EAAGA,EAAIY,EAAIJ,OAAQR,IAC5BiB,EAASjB,GAAK,EAMlB,IAHAc,EAAQT,KAAK,GACbQ,EAAER,KAAK,GAEa,IAAbQ,EAAEL,QAEL,IADA,IAAIU,EAAcL,EAAEM,QACXnB,EAAI,EAAGA,EAAIY,EAAIM,GAAaV,OAAQR,IAAK,CAC9C,IAAIoB,EAAcR,EAAIM,GAAalB,GACnCgB,EAAOX,KAAK,CAACe,EAAaF,KACY,IAAlCJ,EAAQL,SAASW,KACjBP,EAAER,KAAKe,GACPN,EAAQT,KAAKe,GACbH,EAASG,GAAeF,GAMpC,IADA,IAAI/B,EAAIyB,EAAIJ,OAAO,EACN,IAANrB,GACH4B,EAAKV,KAAKlB,GACVA,EAAI8B,EAAS9B,GAMjB,OAJA4B,EAAKV,KAAK,GACVM,EAAW,GAAKK,EAChBL,EAAW,GAAKI,EAETJ,EDmFaU,CAAczC,KAAKZ,MAAMW,kB,wBAI7C,SAAW2C,GAAI,IAAD,OAKNC,EAAO,EAEX3C,KAAKQ,GAAGoC,IAAIF,EAAE,GAAGpB,YAAYuB,MAAM,mBAAoB,OACvD,IARU,eAQDzB,GACL,IAAMG,EAASmB,EAAE,GAAGtB,GAAG,GACjBI,EAASkB,EAAE,GAAGtB,GAAG,GACvBuB,EATiB,GASVvB,EACP0B,YAAW,WACP,EAAKtC,GAAGoC,IAAR,UAAerB,EAAf,YAAyBC,IAAUqB,MAAM,aAAc,SACvD,EAAKrC,GAAGoC,IAAR,UAAepB,EAAf,YAAyBD,IAAUsB,MAAM,aAAc,WAZ1C,GAadzB,IAPEA,EAAI,EAAGA,EAAIsB,EAAE,GAAGd,OAAQR,IAAM,EAA9BA,GAUT,IAlBU,eAkBDA,GACL,IAAMG,EAASmB,EAAE,GAAGtB,GACdI,EAASkB,EAAE,GAAGtB,EAAE,GAEtB0B,YAAW,WACP,EAAKtC,GAAGoC,IAAIpB,EAAOF,YAAYuB,MAAM,mBAAoB,OACzD,EAAKrC,GAAGoC,IAAR,UAAerB,EAAf,YAAyBC,IAAUqB,MAAM,aAAc,UACvD,EAAKrC,GAAGoC,IAAR,UAAerB,EAAf,YAAyBC,IAAUqB,MAAM,aAAc,WACvD,EAAKrC,GAAGoC,IAAR,UAAepB,EAAf,YAAyBD,IAAUsB,MAAM,aAAc,UACvD,EAAKrC,GAAGoC,IAAR,UAAepB,EAAf,YAAyBD,IAAUsB,MAAM,aAAc,aACxDF,EAxBY,IAwBJvB,IAVNA,EAAI,EAAGA,EAAIsB,EAAE,GAAGd,OAAQR,IAAM,EAA9BA,K,oBAcb,WAAU,IAAD,OACL,OACI,gCACI,sBAAK2B,UAAU,mBAAf,UACI,wBAAQA,UAAU,SAASC,QAASC,EAApC,uCACA,wBAAQF,UAAU,SAASC,QAAU,kBAAM,EAAKE,sBAAhD,oCAEJ,qBAAKH,UAAU,uBAAf,SACI,cAAC,IAAD,CACAxD,SAAUS,KAAKZ,MAAMG,SACrBiB,GAAI,SAACA,GACD,EAAKA,GAAKA,EACVA,EAAG2C,GAAG,UAAU,SAAAC,GACZ5C,EAAG6C,OAAO,EAAKjE,MAAMI,SAAS8D,MAC9B9C,EAAG+C,UAGXV,MAAO,CACCW,MAAOxD,KAAKZ,MAAMC,EAClBoE,OAAQzD,KAAKZ,MAAME,GAE3BoE,WAAY,CACR,CACIC,SAAU,OACVd,MAAO,CACHW,MAAO,GACPC,OAAQ,GACRtC,MAAO,cACPyC,gBAAiB,QACjB,YAAa,KAGrB,CACID,SAAU,OACVd,MAAO,CACHW,MAAO,GACP,aAAc,OACd,aAAc,sB,GAxLFK,IAAMC,WAoMlD,SAASzC,EAAsB0C,EAAKC,GAChC,OAAOC,KAAKC,MAAMD,KAAKE,UAAaH,EAAMD,EAAM,GAAKA,GAGzD,SAASd,IACL/C,OAAOkE,SAASC,QAAO,G,MEtMZC,MARf,WACE,OACE,qBAAKvB,UAAU,MAAf,SACE,cAAC,EAAD,OCKSwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.edfb7ffb.chunk.js","sourcesContent":["import cytoscape from 'cytoscape';\r\nimport cola from 'cytoscape-cola';\r\nimport React from 'react';\r\nimport CytoscapeComponent from 'react-cytoscapejs';\r\nimport {breadthSearch} from '../Algorithms/bfs'\r\nimport './GraphComponent.css'\r\n\r\ncytoscape.use(cola);\r\n\r\nexport default class GraphComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            w: 0,\r\n            h: 0,\r\n            elements: [],\r\n            options: {\r\n                name: 'cola',\r\n                randomize: true,\r\n                padding: 150,\r\n                avoidOverlap: true,\r\n                maxSimulationTime: 10000,\r\n            },\r\n            // number of nodes present in each new graph\r\n            nodes: 100,\r\n            // current method of keeping track of which nodes are connected to each other: adjaceny List \r\n            adjacencyList: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // set the dimensions of container upon mount\r\n        this.setState({\r\n            w: window.innerWidth,\r\n            h: window.innerHeight,\r\n        });\r\n        // create a new graph\r\n        this.resetGraph();\r\n    }\r\n\r\n    resetGraph() {\r\n        this.newGraph(this.state.nodes);\r\n    }\r\n\r\n    newGraph(n) {\r\n        //clear the graph\r\n        this.cy.elements().remove();\r\n        const edgeList = [];\r\n        const adjList = [];\r\n        //target number of edges: add more to n to make the final graph more chaotic\r\n        const n_edges = n + 8;\r\n        //to make sure there are at least n edges\r\n        var count = n;\r\n        var edgeName = \"\";\r\n        var randNode = 0;\r\n        //initialize first node with proper values\r\n        this.cy.add({data: {id: \"0\", label: \"n0\"}});\r\n        //initialize 2d array: adjacency list\r\n        for (let i = 0; i < n; i++) {\r\n            adjList[i] = [];\r\n        }\r\n\r\n\r\n        //creation of the graph\r\n        for (let i = 1; i < n; i++) {\r\n            /* the graph only adds edges to a random node 'randNode' within 5 steps from the most recently visited node. \r\n               this creates a more spread out and linear graph.\r\n            */\r\n            if (i >= 5){\r\n                randNode = RandomIntFromInterval(i-5, i-1);\r\n            } else {\r\n                randNode = RandomIntFromInterval(0, i-1);\r\n            }\r\n            //if at the last node, label it target\r\n            if (i === n-1) {\r\n                this.cy.add({data: {id: i.toString(), label: \"target\"}});\r\n            } else {\r\n                this.cy.add({data: {id: i.toString(), label: \"\"}});\r\n            }\r\n\r\n            /*create an edge between the current node and a random node within 5 steps and label it with a string that is composed of the \r\n              source node number + e + target node number.\r\n              Example:   node 8 ---> node 4       would have label: 8e4\r\n              Push this edgename onto array of edgenames and update the adjacency list accordingly.\r\n            */\r\n\r\n            this.cy.add({data: {id: randNode.toString()+\"e\"+i.toString(), source: randNode.toString(), target: i.toString(), label: \"e\"+i.toString()}});\r\n            edgeName = randNode.toString() + i.toString();\r\n            edgeList.push(edgeName);\r\n            adjList[randNode].push(i);\r\n            adjList[i].push(randNode);\r\n        }\r\n\r\n        //after reaching n edges and until reaching target number of edges, add edges between random nodes.\r\n        while (count <= n_edges) {\r\n            var node1 = \"0\";\r\n            var node2 = \"0\";\r\n            for ( let i = 0; i < edgeList.length; i++) {\r\n                //handling duplicate edges\r\n                if ((edgeList[i].includes(node1) && edgeList[i].includes(node2)) || node1 === node2) {\r\n                    i = 0;\r\n                    node1 = RandomIntFromInterval(1, n-1).toString();\r\n                    node2 = RandomIntFromInterval(1, n-1).toString();\r\n                }\r\n            }\r\n            this.cy.add({data: {id: node1+\"e\"+node2, source: node1, target: node2, label: \"e\"+count.toString()}});\r\n            edgeName = node1 + node2;\r\n            edgeList.push(edgeName);\r\n            adjList[parseInt(node1)].push(parseInt(node2));\r\n            adjList[parseInt(node2)].push(parseInt(node1));\r\n            count++;\r\n        }\r\n        //update adjacency list in state\r\n        this.setState({\r\n            adjacencyList: adjList\r\n        });\r\n    }\r\n\r\n    breadthFirstSearch() {\r\n        this.animations(breadthSearch(this.state.adjacencyList));\r\n    }\r\n\r\n    //this function is passed an array of edgenames to apply animations to.\r\n    animations(p) {\r\n        //controls timing of first round of animations: the search\r\n        const SPREAD_DELAY = 25;\r\n        //controls timing of second round of animations: the path\r\n        const PATH_DELAY = 100;\r\n        var time = 0;\r\n        //access the element with corresponding edgename and change color after a timeout\r\n        this.cy.$id(p[0].toString()).style('background-color', 'red');\r\n        for (let i = 0; i < p[0].length; i++) {\r\n            const source = p[0][i][0];\r\n            const target = p[0][i][1];\r\n            time = i * SPREAD_DELAY;\r\n            setTimeout(() => {\r\n                this.cy.$id(`${source}e${target}`).style('line-color', 'green');\r\n                this.cy.$id(`${target}e${source}`).style('line-color', 'green');\r\n            }, i * SPREAD_DELAY);\r\n        }\r\n\r\n        for (let i = 1; i < p[1].length; i++) {\r\n            const source = p[1][i];\r\n            const target = p[1][i-1];\r\n            //access the element with corresponding edgename and change color after a timeout\r\n            setTimeout(() => {\r\n                this.cy.$id(target.toString()).style('background-color', 'red');\r\n                this.cy.$id(`${source}e${target}`).style('line-style', 'dashed');\r\n                this.cy.$id(`${source}e${target}`).style('line-color', '#BB371B');\r\n                this.cy.$id(`${target}e${source}`).style('line-style', 'dashed');\r\n                this.cy.$id(`${target}e${source}`).style('line-color', '#BB371B');\r\n            }, time + (i * PATH_DELAY));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"button-container\">\r\n                    <button className=\"button\" onClick={refreshPage}>Generate New Random Graph</button>\r\n                    <button className=\"button\" onClick={ () => this.breadthFirstSearch()}>Shortest Path (BFS)</button>\r\n                </div>\r\n                <div className=\"visualizer-container\">\r\n                    <CytoscapeComponent \r\n                    elements={this.state.elements} \r\n                    cy={(cy) => { \r\n                        this.cy = cy \r\n                        cy.on('resize', _evt => {\r\n                            cy.layout(this.state.options).run()\r\n                            cy.fit()\r\n                        })\r\n                    }} \r\n                    style={{\r\n                            width: this.state.w, \r\n                            height: this.state.h\r\n                    }}\r\n                    stylesheet={[\r\n                        {\r\n                            selector: 'node',\r\n                            style: {\r\n                                width: 20,\r\n                                height: 20,\r\n                                label: 'data(label)',\r\n                                backgroundColor: 'black',\r\n                                \"font-size\": 45\r\n                            }\r\n                        },\r\n                        {\r\n                            selector: 'edge',\r\n                            style: {\r\n                                width: 10,\r\n                                \"line-color\": 'cyan',\r\n                                \"line-style\": 'solid',\r\n                                \r\n                            }\r\n                        }\r\n                    ]} >\r\n                    </CytoscapeComponent>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction RandomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * ( max - min + 1) + min);\r\n}\r\n\r\nfunction refreshPage() {\r\n    window.location.reload(false);\r\n}","export function breadthSearch(adj) {\r\n    var animations = [0,0];\r\n    var q = [];\r\n    var visited = [];\r\n    var path = [];\r\n    var spread = [];\r\n\r\n    var previous = [];\r\n    for (let i = 0; i < adj.length; i++) {\r\n        previous[i] = 0;\r\n    }\r\n    \r\n    visited.push(0);\r\n    q.push(0);\r\n    \r\n    while (q.length !== 0) {\r\n        var node_source = q.shift();\r\n        for (let i = 0; i < adj[node_source].length; i++) {\r\n            var node_target = adj[node_source][i];\r\n            spread.push([node_target, node_source]);\r\n            if (visited.includes(node_target) === false) {\r\n                q.push(node_target);\r\n                visited.push(node_target);\r\n                previous[node_target] = node_source;\r\n            }\r\n        }\r\n    }\r\n\r\n    var n = adj.length-1;\r\n    while (n !== 0) {\r\n        path.push(n);\r\n        n = previous[n];\r\n    }\r\n    path.push(0);\r\n    animations[0] = spread;\r\n    animations[1] = path;\r\n\r\n    return animations;\r\n}","import React from 'react';\nimport GraphComponent from './Components/GraphComponent'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GraphComponent></GraphComponent>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}